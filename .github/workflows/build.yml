name: "Build"

on:
  workflow_dispatch:

  push:
    branches:
      - main
    tags:
      - v*

defaults:
  run:
    shell: bash

jobs:
  build-editor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Voicevox
        uses: actions/checkout@v4
        with:
          repository: "sevenc-nanashi/voicevox"
          ref: "add/vst"

      - name: Checkout VVVST
        uses: actions/checkout@v4
        with:
          path: vvvst

      - name: Checkout Product Version Resource
        uses: actions/checkout@v4
        with:
          repository: VOICEVOX/voicevox_resource
          ref: "0.17.1"
          path: resource

      - name: Create and replace software resources
        run: |
          rm build/README.txt
          rm public/policy.md
          {
            cat resource/editor/README.md
            echo
            cat resource/editor/ACKNOWLEDGMENTS.md
          } \
          > build/README.txt
          cp build/README.txt public/policy.md
          echo "----" >> public/policy.md
          cat vvvst/Assets/vstinfo.md >> public/policy.md
          curl https://steinbergmedia.github.io/vst3_dev_portal/resources/licensing_6.png -o ./public/res/vst_logo.png

          cp resource/editor/PRIVACYPOLICY.md public/privacyPolicy.md

          cat ./vvvst/Assets/howtouse.md ./public/howtouse.md > ./public/howtouse.md.tmp
          mv ./public/howtouse.md.tmp ./public/howtouse.md

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install

      - name: Generate public/licenses.json
        run: |
          npm run license:generate -- -o editor_licenses.json
          npm run license:merge -- -o public/licenses.json -i editor_licenses.json -i vvvst/Assets/licenses.json

      - name: Build
        run: |
          npm run vst:build

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: build-editor
          path: dist_vst/voicevox.zip
  build-each:
    needs:
      - build-editor
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            name: "windows"
          - os: macos-latest
            name: "macos"
          - os: ubuntu-latest
            name: "linux"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout VVVST
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Download Editor
        uses: actions/download-artifact@v4
        with:
          name: build-editor
          path: Resources

      - name: Cache CMake
        uses: actions/cache@v4
        with:
          path: build
          key: cmake-${{ matrix.os }}-v1

      - name: Determine Information
        id: determine-information
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let version = github.ref_name;
            if (!version) {
              version = "999.999.999";
            }
            core.setOutput('ref_name', version);
            core.setOutput('prerelease', version === "999.999.999" || version.includes("-"));
            core.setOutput('zip_name', `vvvst-${version}-${{ matrix.name }}.zip`);
            require('fs').writeFileSync('version.txt', version);

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libglib2.0-dev libgtk-3-dev libsoup-3.0-dev libjavascriptcoregtk-4.0-dev libwebkit2gtk-4.0-dev libasound2-dev

      - name: Build
        run: |
          rm -rf build/Vvvst_artefacts
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Package
        run: |
          cd build/Vvvst_artefacts/Release/VST3
          7z a -tzip ${{ steps.determine-information.outputs.zip_name }} VVVST.vst3
          cp ${{ steps.determine-information.outputs.zip_name }} ../../../../

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          body: "SHA: ${{ github.sha }}"
          prerelease: ${{ steps.determine-information.outputs.prerelease }}
          files: ${{ steps.determine-information.outputs.zip_name }}
          tag_name: ${{ steps.determine-information.outputs.ref_name }}

      - name: Setup Ruby
        if: matrix.os == 'windows-latest'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Build installer
        if: matrix.os == 'windows-latest'
        run: |
          gem update rake
          rake installer

      - name: Upload installer
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine-information.outputs.ref_name }}
          files: ./build/VVVST-*-setup.exe
